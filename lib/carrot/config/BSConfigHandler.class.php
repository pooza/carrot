<?php
/**
 * @package jp.co.b-shock.carrot
 * @subpackage config
 */

/**
 * 抽象設定ハンドラ
 *
 * @author 小石達也 <tkoishi@b-shock.co.jp>
 * @copyright (c)b-shock. co., ltd.
 * @version $Id$
 */
abstract class BSConfigHandler extends ConfigHandler {
	private $body = array();

	/**
	 * コンストラクタ
	 *
	 * @access public
	 */
	public function __construct () {
		$this->putLine('// auth-generated by ' . get_class($this));
		$this->putLine('// date: ' . BSDate::getNow('Y/m/d H:i:s'));
	}

	/**
	 * プロパティ取得のオーバライド
	 *
	 * @access public
	 * @param string $name プロパティ名
	 * @return mixed 各種オブジェクト
	 */
	public function __get ($name) {
		switch ($name) {
			case 'controller':
				return BSController::getInstance();
			case 'request':
				return $this->getContext()->getRequest();
			case 'user':
				return $this->getContext()->getUser();
			case 'context':
				return $this->controller->getContext();
		}
	}

	/**
	 * 変換後のphpステートメントを返す
	 *
	 * @access public
	 * @return string コンパイル結果
	 */
	protected function getBody () {
		return "<?php\n" . implode("\n", $this->body) . "\n?>";
	}

	/**
	 * phpステートメントの末尾に1行追加
	 *
	 * @access public
	 * @param string $line phpステートメント
	 */
	protected function putLine ($line) {
		$this->body[] = $line;
	}

	/**
	 * 設定ファイルの設定内容を配列で返す
	 *
	 * @access public
	 * @param string $path 設定ファイルのパス
	 * @return string[][] 設定値
	 */
	protected function getConfig ($path) {
		$file = new BSIniFile($path);
		return $file->getContents();
	}

	/**
	 * phpリテラル化して返す
	 *
	 * @access public
	 * @param string $value 変換対象
	 * @return string phpリテラル化された文字列
	 * @static
	 */
	public static function literalize ($value) {
		$value = self::replaceConstants($value);
		return parent::literalize($value);
	}

	/**
	 * 埋め込まれた定数を展開して返す
	 *
	 * @access public
	 * @param string $value 変換対象
	 * @return string 定数が展開された文字列
	 * @static
	 */
	public static function & replaceConstants ($value) {
		return BSDirectoryFinder::replaceConstants($value);
	}
}

?>